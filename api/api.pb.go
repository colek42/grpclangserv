// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Query
	Position
	DefResponse
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Query struct {
	LineNumber int32  `protobuf:"varint,1,opt,name=lineNumber" json:"lineNumber,omitempty"`
	CharNumber int32  `protobuf:"varint,2,opt,name=charNumber" json:"charNumber,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=fileName" json:"fileName,omitempty"`
	Pkg        string `protobuf:"bytes,4,opt,name=pkg" json:"pkg,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Query) GetLineNumber() int32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

func (m *Query) GetCharNumber() int32 {
	if m != nil {
		return m.CharNumber
	}
	return 0
}

func (m *Query) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Query) GetPkg() string {
	if m != nil {
		return m.Pkg
	}
	return ""
}

type Position struct {
	FileName string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	Offset   int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Line     int32  `protobuf:"varint,3,opt,name=line" json:"line,omitempty"`
	Column   int32  `protobuf:"varint,4,opt,name=column" json:"column,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Position) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Position) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Position) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Position) GetColumn() int32 {
	if m != nil {
		return m.Column
	}
	return 0
}

type DefResponse struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type     string    `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Pkg      string    `protobuf:"bytes,3,opt,name=pkg" json:"pkg,omitempty"`
	Position *Position `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
}

func (m *DefResponse) Reset()                    { *m = DefResponse{} }
func (m *DefResponse) String() string            { return proto.CompactTextString(m) }
func (*DefResponse) ProtoMessage()               {}
func (*DefResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DefResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DefResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DefResponse) GetPkg() string {
	if m != nil {
		return m.Pkg
	}
	return ""
}

func (m *DefResponse) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func init() {
	proto.RegisterType((*Query)(nil), "types.Query")
	proto.RegisterType((*Position)(nil), "types.Position")
	proto.RegisterType((*DefResponse)(nil), "types.DefResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LanguageServer service

type LanguageServerClient interface {
	GetDefinition(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DefResponse, error)
}

type languageServerClient struct {
	cc *grpc.ClientConn
}

func NewLanguageServerClient(cc *grpc.ClientConn) LanguageServerClient {
	return &languageServerClient{cc}
}

func (c *languageServerClient) GetDefinition(ctx context.Context, in *Query, opts ...grpc.CallOption) (*DefResponse, error) {
	out := new(DefResponse)
	err := grpc.Invoke(ctx, "/types.LanguageServer/GetDefinition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LanguageServer service

type LanguageServerServer interface {
	GetDefinition(context.Context, *Query) (*DefResponse, error)
}

func RegisterLanguageServerServer(s *grpc.Server, srv LanguageServerServer) {
	s.RegisterService(&_LanguageServer_serviceDesc, srv)
}

func _LanguageServer_GetDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServerServer).GetDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LanguageServer/GetDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServerServer).GetDefinition(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _LanguageServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.LanguageServer",
	HandlerType: (*LanguageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefinition",
			Handler:    _LanguageServer_GetDefinition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xc1, 0x4e, 0xeb, 0x30,
	0x10, 0x7c, 0x79, 0x69, 0xaa, 0x74, 0x4b, 0x01, 0xf9, 0x80, 0xa2, 0x1e, 0x50, 0x95, 0x53, 0x25,
	0xa4, 0x20, 0xb5, 0xbf, 0x50, 0xc4, 0x05, 0x55, 0x60, 0xbe, 0xc0, 0xad, 0x36, 0xc1, 0x90, 0xd8,
	0x96, 0x63, 0x23, 0xf5, 0xef, 0x91, 0xb7, 0x6e, 0x5a, 0xb8, 0xcd, 0xcc, 0x7a, 0x34, 0xe3, 0x5d,
	0x98, 0x09, 0x23, 0x1f, 0x85, 0x91, 0x95, 0xb1, 0xda, 0x69, 0x96, 0xb9, 0x83, 0xc1, 0xbe, 0xf4,
	0x90, 0xbd, 0x79, 0xb4, 0x07, 0x76, 0x0f, 0xd0, 0x4a, 0x85, 0x5b, 0xdf, 0xed, 0xd0, 0x16, 0xc9,
	0x22, 0x59, 0x66, 0xfc, 0x42, 0x09, 0xf3, 0xfd, 0x87, 0xb0, 0x71, 0xfe, 0xff, 0x38, 0x3f, 0x2b,
	0x6c, 0x0e, 0x79, 0x2d, 0x5b, 0xdc, 0x8a, 0x0e, 0x8b, 0x74, 0x91, 0x2c, 0x27, 0x7c, 0xe0, 0xec,
	0x16, 0x52, 0xf3, 0xd5, 0x14, 0x23, 0x92, 0x03, 0x2c, 0x3f, 0x21, 0x7f, 0xd5, 0xbd, 0x74, 0x52,
	0xab, 0x5f, 0xce, 0xe4, 0x8f, 0xf3, 0x0e, 0xc6, 0xba, 0xae, 0x7b, 0x74, 0x31, 0x31, 0x32, 0xc6,
	0x60, 0x14, 0xba, 0x51, 0x52, 0xc6, 0x09, 0x87, 0xb7, 0x7b, 0xdd, 0xfa, 0x4e, 0x51, 0x50, 0xc6,
	0x23, 0x2b, 0x1d, 0x4c, 0x37, 0x58, 0x73, 0xec, 0x8d, 0x56, 0x3d, 0x06, 0xab, 0x3a, 0x47, 0x11,
	0x0e, 0x5a, 0x58, 0x07, 0x85, 0x4c, 0x38, 0xe1, 0x53, 0xe9, 0x74, 0x28, 0xcd, 0x1e, 0x20, 0x37,
	0xb1, 0x34, 0x45, 0x4c, 0x57, 0x37, 0x15, 0x6d, 0xb1, 0x3a, 0xfd, 0x85, 0x0f, 0x0f, 0x56, 0x4f,
	0x70, 0xfd, 0x22, 0x54, 0xe3, 0x45, 0x83, 0xef, 0x68, 0xbf, 0xd1, 0xb2, 0x35, 0xcc, 0x9e, 0xd1,
	0x6d, 0xb0, 0x96, 0xea, 0xf8, 0xf1, 0xab, 0xe8, 0xa6, 0x03, 0xcc, 0x59, 0x64, 0x17, 0x5d, 0xcb,
	0x7f, 0xbb, 0x31, 0x5d, 0x6b, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x87, 0x1e, 0x21, 0xbe,
	0x01, 0x00, 0x00,
}
